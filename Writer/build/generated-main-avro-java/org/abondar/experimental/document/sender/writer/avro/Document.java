/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.abondar.experimental.document.sender.writer.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Document extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4135039889624586897L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Document\",\"namespace\":\"org.abondar.experimental.document.sender.writer.avro\",\"fields\":[{\"name\":\"mediaType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"content\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"metadata\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String mediaType;
  @Deprecated public java.lang.String content;
  @Deprecated public java.lang.String metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Document() {}

  /**
   * All-args constructor.
   * @param mediaType The new value for mediaType
   * @param content The new value for content
   * @param metadata The new value for metadata
   */
  public Document(java.lang.String mediaType, java.lang.String content, java.lang.String metadata) {
    this.mediaType = mediaType;
    this.content = content;
    this.metadata = metadata;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaType;
    case 1: return content;
    case 2: return metadata;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaType = (java.lang.String)value$; break;
    case 1: content = (java.lang.String)value$; break;
    case 2: metadata = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public java.lang.String getMediaType() {
    return mediaType;
  }

  /**
   * Sets the value of the 'mediaType' field.
   * @param value the value to set.
   */
  public void setMediaType(java.lang.String value) {
    this.mediaType = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.String getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.String value) {
    this.content = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public java.lang.String getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(java.lang.String value) {
    this.metadata = value;
  }

  /**
   * Creates a new Document RecordBuilder.
   * @return A new Document RecordBuilder
   */
  public static org.abondar.experimental.document.sender.writer.avro.Document.Builder newBuilder() {
    return new org.abondar.experimental.document.sender.writer.avro.Document.Builder();
  }

  /**
   * Creates a new Document RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Document RecordBuilder
   */
  public static org.abondar.experimental.document.sender.writer.avro.Document.Builder newBuilder(org.abondar.experimental.document.sender.writer.avro.Document.Builder other) {
    return new org.abondar.experimental.document.sender.writer.avro.Document.Builder(other);
  }

  /**
   * Creates a new Document RecordBuilder by copying an existing Document instance.
   * @param other The existing instance to copy.
   * @return A new Document RecordBuilder
   */
  public static org.abondar.experimental.document.sender.writer.avro.Document.Builder newBuilder(org.abondar.experimental.document.sender.writer.avro.Document other) {
    return new org.abondar.experimental.document.sender.writer.avro.Document.Builder(other);
  }

  /**
   * RecordBuilder for Document instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Document>
    implements org.apache.avro.data.RecordBuilder<Document> {

    private java.lang.String mediaType;
    private java.lang.String content;
    private java.lang.String metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.abondar.experimental.document.sender.writer.avro.Document.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[0].schema(), other.mediaType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.content)) {
        this.content = data().deepCopy(fields()[1].schema(), other.content);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Document instance
     * @param other The existing instance to copy.
     */
    private Builder(org.abondar.experimental.document.sender.writer.avro.Document other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[0].schema(), other.mediaType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.content)) {
        this.content = data().deepCopy(fields()[1].schema(), other.content);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public java.lang.String getMediaType() {
      return mediaType;
    }

    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder setMediaType(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.String getContent() {
      return content;
    }

    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder setContent(java.lang.String value) {
      validate(fields()[1], value);
      this.content = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder clearContent() {
      content = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public java.lang.String getMetadata() {
      return metadata;
    }

    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder setMetadata(java.lang.String value) {
      validate(fields()[2], value);
      this.metadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public org.abondar.experimental.document.sender.writer.avro.Document.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Document build() {
      try {
        Document record = new Document();
        record.mediaType = fieldSetFlags()[0] ? this.mediaType : (java.lang.String) defaultValue(fields()[0]);
        record.content = fieldSetFlags()[1] ? this.content : (java.lang.String) defaultValue(fields()[1]);
        record.metadata = fieldSetFlags()[2] ? this.metadata : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
